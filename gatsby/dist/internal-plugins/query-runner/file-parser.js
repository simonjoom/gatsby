"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _babelTraverse = _interopRequireDefault(require("babel-traverse"));

var _babelParseToAst = require("../../utils/babel-parse-to-ast");

const fs = require(`fs-extra`);

const crypto = require(`crypto`);

const _ = require(`lodash`); // Traverse is a es6 module...


const getGraphQLTag = require(`babel-plugin-remove-graphql-queries`).getGraphQLTag;

const report = require(`gatsby-cli/lib/reporter`);

const apiRunnerNode = require(`../../utils/api-runner-node`);
/**
 * Add autogenerated query name if it wasn't defined by user.
 */


const generateQueryName = ({
  def,
  hash,
  file
}) => {
  if (!def.name || !def.name.value) {
    def.name = {
      value: `${_.camelCase(file)}${hash}`,
      kind: `Name`
    };
  }

  return def;
};

function parseToAst(_x, _x2) {
  return _parseToAst.apply(this, arguments);
}

function _parseToAst() {
  _parseToAst = (0, _asyncToGenerator2.default)(function* (filePath, fileStr) {
    let ast; // Preprocess and attempt to parse source; return an AST if we can, log an
    // error if we can't.

    const transpiled = yield apiRunnerNode(`preprocessSource`, {
      filename: filePath,
      contents: fileStr
    });

    if (transpiled && transpiled.length) {
      for (var _iterator = transpiled, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        const item = _ref;

        try {
          const tmp = (0, _babelParseToAst.babelParseToAst)(item, filePath);
          ast = tmp;
          break;
        } catch (error) {
          report.error(error);
          continue;
        }
      }

      if (ast === undefined) {
        report.error(`Failed to parse preprocessed file ${filePath}`);
      }
    } else {
      try {
        ast = (0, _babelParseToAst.babelParseToAst)(fileStr, filePath);
      } catch (error) {
        report.error(`There was a problem parsing "${filePath}"; any GraphQL ` + `fragments or queries in this file were not processed. \n` + `This may indicate a syntax error in the code, or it may be a file type ` + `that Gatsby does not know how to parse.`);
      }
    }

    return ast;
  });
  return _parseToAst.apply(this, arguments);
}

const warnForGlobalTag = file => report.warn(`Using the global \`graphql\` tag is deprecated, and will not be supported in v3.\n` + `Import it instead like:  import { graphql } from 'gatsby' in file:\n` + file);

function findGraphQLTags(_x3, _x4) {
  return _findGraphQLTags.apply(this, arguments);
}

function _findGraphQLTags() {
  _findGraphQLTags = (0, _asyncToGenerator2.default)(function* (file, text) {
    return new Promise((resolve, reject) => {
      parseToAst(file, text).then(ast => {
        let queries = [];

        if (!ast) {
          resolve(queries);
          return;
        }
        /**
         * A map of graphql documents to unique locations.
         *
         * A graphql document's unique location is made of:
         *
         *  - the location of the graphql template literal that contains the document, and
         *  - the document's location within the graphql template literal
         *
         * This is used to prevent returning duplicated documents.
         */


        const documentLocations = new WeakMap(); // Look for queries in <StaticQuery /> elements.

        (0, _babelTraverse.default)(ast, {
          TaggedTemplateExpression(path) {
            var _path$parentPath, _path$parentPath$pare, _path$parentPath$pare2, _path$parentPath$pare3, _path$parentPath2, _path$parentPath2$par, _path$parentPath2$par2, _path$parentPath2$par3, _path$parentPath2$par4;

            if (`descendant of query`, (path === null || path === void 0 ? void 0 : (_path$parentPath = path.parentPath) === null || _path$parentPath === void 0 ? void 0 : (_path$parentPath$pare = _path$parentPath.parentPath) === null || _path$parentPath$pare === void 0 ? void 0 : (_path$parentPath$pare2 = _path$parentPath$pare.node) === null || _path$parentPath$pare2 === void 0 ? void 0 : (_path$parentPath$pare3 = _path$parentPath$pare2.name) === null || _path$parentPath$pare3 === void 0 ? void 0 : _path$parentPath$pare3.name) !== `query`) {
              return;
            }

            if (((_path$parentPath2 = path.parentPath) === null || _path$parentPath2 === void 0 ? void 0 : (_path$parentPath2$par = _path$parentPath2.parentPath) === null || _path$parentPath2$par === void 0 ? void 0 : (_path$parentPath2$par2 = _path$parentPath2$par.parentPath) === null || _path$parentPath2$par2 === void 0 ? void 0 : (_path$parentPath2$par3 = _path$parentPath2$par2.node) === null || _path$parentPath2$par3 === void 0 ? void 0 : (_path$parentPath2$par4 = _path$parentPath2$par3.name) === null || _path$parentPath2$par4 === void 0 ? void 0 : _path$parentPath2$par4.name) !== `StaticQuery`) {
              return;
            }

            const _getGraphQLTag = getGraphQLTag(path),
                  gqlAst = _getGraphQLTag.ast,
                  text = _getGraphQLTag.text,
                  hash = _getGraphQLTag.hash,
                  isGlobal = _getGraphQLTag.isGlobal;

            if (!gqlAst) return;
            if (isGlobal) warnForGlobalTag(file);
            gqlAst.definitions.forEach(def => {
              documentLocations.set(def, `${path.node.start}-${def.loc.start}`);
              generateQueryName({
                def,
                hash,
                file
              });
            });
            const definitions = [...gqlAst.definitions].map(d => {
              d.isStaticQuery = true;
              d.text = text;
              d.hash = hash;
              return d;
            });
            queries.push(...definitions);
          }

        }); // Look for exported page queries

        (0, _babelTraverse.default)(ast, {
          ExportNamedDeclaration(path, state) {
            path.traverse({
              TaggedTemplateExpression(innerPath) {
                const _getGraphQLTag2 = getGraphQLTag(innerPath),
                      gqlAst = _getGraphQLTag2.ast,
                      isGlobal = _getGraphQLTag2.isGlobal,
                      hash = _getGraphQLTag2.hash;

                if (!gqlAst) return;
                if (isGlobal) warnForGlobalTag(file);
                gqlAst.definitions.forEach(def => {
                  documentLocations.set(def, `${innerPath.node.start}-${def.loc.start}`);
                  generateQueryName({
                    def,
                    hash,
                    file
                  });
                });
                queries.push(...gqlAst.definitions);
              }

            });
          }

        }); // Remove duplicate queries

        const uniqueQueries = _.uniqBy(queries, q => documentLocations.get(q));

        resolve(uniqueQueries);
      }).catch(reject);
    });
  });
  return _findGraphQLTags.apply(this, arguments);
}

const cache = {};

class FileParser {
  parseFile(file) {
    return (0, _asyncToGenerator2.default)(function* () {
      let text;

      try {
        text = yield fs.readFile(file, `utf8`);
      } catch (err) {
        report.error(`There was a problem reading the file: ${file}`, err);
        return null;
      }

      if (text.indexOf(`graphql`) === -1) return null;
      const hash = crypto.createHash(`md5`).update(file).update(text).digest(`hex`);

      try {
        let astDefinitions = cache[hash] || (cache[hash] = yield findGraphQLTags(file, text));
        return astDefinitions.length ? {
          kind: `Document`,
          definitions: astDefinitions
        } : null;
      } catch (err) {
        report.error(`There was a problem parsing the GraphQL query in file: ${file}`, err);
        return null;
      }
    })();
  }

  parseFiles(files) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const documents = new Map();
      return Promise.all(files.map(file => _this.parseFile(file).then(doc => {
        if (!doc) return;
        documents.set(file, doc);
      }))).then(() => documents);
    })();
  }

}

exports.default = FileParser;
//# sourceMappingURL=file-parser.js.map