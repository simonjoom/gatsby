{"version":3,"sources":["../../src/schema/infer-graphql-input-fields.js"],"names":["require","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","oneLine","_","invariant","typeOf","createTypeName","createKey","getExampleValues","extractFieldNames","isEmptyObjectOrArray","findLinkedNode","getNodes","is32BitInteger","typeFields","type","eq","ne","in","regex","glob","gt","gte","lt","lte","inferGraphQLInputFields","value","nodes","prefix","headValue","headType","inType","inferredField","JSON","stringify","Object","keys","fields","elemMatch","name","inferInputObjectStructureFromNodes","exampleValue","inferredFields","isEmpty","EXCLUDE_KEYS","parent","children","recursiveOmitBy","fn","isObject","isPlainObject","omitBy","each","v","k","linkedNodeCache","typeName","isRoot","internal","key","includes","nodeToFind","isArray","linkedNode","relatedNodes","filter","node","_v","_k","split","field","upperFirst","sort"],"mappings":"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","sourcesContent":["// @flow\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n} = require(`graphql`)\nconst { oneLine } = require(`common-tags`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst typeOf = require(`type-of`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  getExampleValues,\n  extractFieldNames,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\n\nconst { findLinkedNode } = require(`./infer-graphql-type`)\nconst { getNodes } = require(`../redux`)\nconst is32BitInteger = require(`../utils/is-32-bit-integer`)\n\nimport type {\n  GraphQLInputFieldConfig,\n  GraphQLInputFieldConfigMap,\n} from \"graphql/type/definition\"\n\nfunction typeFields(type): GraphQLInputFieldConfigMap {\n  switch (type) {\n    case `boolean`:\n      return {\n        eq: { type: GraphQLBoolean },\n        ne: { type: GraphQLBoolean },\n        in: { type: new GraphQLList(GraphQLBoolean) },\n      }\n    case `string`:\n      return {\n        eq: { type: GraphQLString },\n        ne: { type: GraphQLString },\n        regex: { type: GraphQLString },\n        glob: { type: GraphQLString },\n        in: { type: new GraphQLList(GraphQLString) },\n      }\n    case `int`:\n      return {\n        eq: { type: GraphQLInt },\n        ne: { type: GraphQLInt },\n        gt: { type: GraphQLInt },\n        gte: { type: GraphQLInt },\n        lt: { type: GraphQLInt },\n        lte: { type: GraphQLInt },\n        in: { type: new GraphQLList(GraphQLInt) },\n      }\n    case `float`:\n      return {\n        eq: { type: GraphQLFloat },\n        ne: { type: GraphQLFloat },\n        gt: { type: GraphQLFloat },\n        gte: { type: GraphQLFloat },\n        lt: { type: GraphQLFloat },\n        lte: { type: GraphQLFloat },\n        in: { type: new GraphQLList(GraphQLFloat) },\n      }\n  }\n  return {}\n}\n\nfunction inferGraphQLInputFields({\n  value,\n  nodes,\n  prefix,\n}): ?GraphQLInputFieldConfig {\n  if (value == null || isEmptyObjectOrArray(value)) return null\n\n  switch (typeOf(value)) {\n    case `array`: {\n      const headValue = value[0]\n      let headType = typeOf(headValue)\n\n      if (headType === `number`)\n        headType = is32BitInteger(headValue) ? `int` : `float`\n\n      // Determine type for in operator.\n      let inType\n      switch (headType) {\n        case `int`:\n          inType = GraphQLInt\n          break\n        case `float`:\n          inType = GraphQLFloat\n          break\n        case `date`:\n        case `string`:\n          inType = GraphQLString\n          break\n        case `boolean`:\n          inType = GraphQLBoolean\n          break\n        case `array`:\n        case `object`: {\n          let inferredField = inferGraphQLInputFields({\n            value: headValue,\n            prefix,\n            nodes,\n          })\n          invariant(\n            inferredField,\n            `Could not infer graphQL type for value: ${JSON.stringify(\n              Object.keys(headValue)\n            )}`\n          )\n          inType = inferredField.type\n          break\n        }\n        default:\n          invariant(\n            false,\n            oneLine`\n              Could not infer an appropriate GraphQL input type\n              for value: ${headValue} of type ${headType} along path: ${prefix}\n            `\n          )\n      }\n\n      let fields\n      if (headType === `object`) {\n        fields = {\n          elemMatch: {\n            type: inType,\n          },\n        }\n      } else {\n        fields = {\n          ...typeFields(headType),\n          in: { type: new GraphQLList(inType) },\n        }\n      }\n\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryList`),\n          fields,\n        }),\n      }\n    }\n    case `boolean`: {\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryBoolean`),\n          fields: typeFields(`boolean`),\n        }),\n      }\n    }\n    case `date`:\n    case `string`: {\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryString`),\n          fields: typeFields(`string`),\n        }),\n      }\n    }\n    case `object`: {\n      const fields = inferInputObjectStructureFromNodes({\n        nodes,\n        prefix,\n        exampleValue: value,\n      }).inferredFields\n      if (!_.isEmpty(fields)) {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}InputObject`),\n            fields,\n          }),\n        }\n      } else {\n        return null\n      }\n    }\n    case `number`: {\n      if (is32BitInteger(value)) {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}QueryInteger`),\n            fields: typeFields(`int`),\n          }),\n        }\n      } else {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}QueryFloat`),\n            fields: typeFields(`float`),\n          }),\n        }\n      }\n    }\n    default:\n      return null\n  }\n}\n\nconst EXCLUDE_KEYS = {\n  parent: 1,\n  children: 1,\n}\n\ntype InferInputOptions = {\n  nodes: Object[],\n  typeName?: string,\n  prefix?: string,\n  exampleValue?: Object,\n}\n\nconst recursiveOmitBy = (value, fn) => {\n  if (_.isObject(value)) {\n    if (_.isPlainObject(value)) {\n      value = _.omitBy(value, fn)\n    }\n    _.each(value, (v, k) => {\n      value[k] = recursiveOmitBy(v, fn)\n    })\n    if (_.isEmpty(value)) {\n      // don't return empty objects - gatsby doesn't support these\n      return null\n    }\n  }\n  return value\n}\n\nconst linkedNodeCache = {}\n\nexport function inferInputObjectStructureFromNodes({\n  nodes,\n  typeName = ``,\n  prefix = ``,\n  exampleValue = null,\n}: InferInputOptions): Object {\n  const inferredFields = {}\n  const isRoot = !prefix\n\n  prefix = isRoot ? typeName : prefix\n  if (exampleValue === null) {\n    // typeName includes \"Connection\" string, which is not what we want,\n    // so extract type from first node\n    exampleValue = getExampleValues({\n      nodes,\n      typeName:\n        nodes && nodes[0] && nodes[0].internal && nodes[0].internal.type,\n    })\n  }\n\n  _.each(exampleValue, (v, k) => {\n    let value = v\n    let key = k\n    // Remove fields for traversing through nodes as we want to control\n    // setting traversing up not try to automatically infer them.\n    if (isRoot && EXCLUDE_KEYS[key]) return\n\n    if (_.includes(key, `___NODE`)) {\n      // TODO: Union the objects in array\n      const nodeToFind = _.isArray(value) ? value[0] : value\n      const linkedNode = findLinkedNode(nodeToFind)\n\n      // Get from cache if found, else store into it\n      if (linkedNodeCache[linkedNode.internal.type]) {\n        value = linkedNodeCache[linkedNode.internal.type]\n      } else {\n        const relatedNodes = getNodes().filter(\n          node => node.internal.type === linkedNode.internal.type\n        )\n        value = getExampleValues({\n          nodes: relatedNodes,\n          typeName: linkedNode.internal.type,\n        })\n        value = recursiveOmitBy(value, (_v, _k) => _.includes(_k, `___NODE`))\n        linkedNodeCache[linkedNode.internal.type] = value\n      }\n\n      if (_.isArray(value)) {\n        value = [value]\n      }\n\n      ;[key] = key.split(`___`)\n    }\n\n    let field = inferGraphQLInputFields({\n      nodes,\n      value,\n      prefix: `${prefix}${_.upperFirst(key)}`,\n    })\n\n    if (field == null) return\n    inferredFields[createKey(key)] = field\n  })\n\n  // Add sorting (but only to the top level).\n  let sort = []\n  if (typeName) {\n    sort = extractFieldNames(nodes)\n  }\n\n  return { inferredFields, sort }\n}\n"],"file":"infer-graphql-input-fields.js"}